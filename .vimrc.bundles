" ==========================================
" bundle 插件管理和配置项
" ==========================================

"----------------------------- begin of configs -----------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉有关vi一致性模式，避免以前版本的一些bug和局限
"在vimrc的一开始就已经设置了，此处就省去了
"set nocompatible
" configure Vundle
filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" ################### 插件管理 ###################

" 使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleInstall!    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件
"     :BundleSearch      search 查找插件
"     :BundleList        list   列出所有使用的插件
Bundle 'gmarik/vundle'


" ################### 主题 ###################"

" 主题 solarized
Bundle 'altercation/vim-colors-solarized'

" 主题 molokai
Bundle 'tomasr/molokai'
" monokai原始背景色
let g:molokai_original = 1

" 主题 tomorrow
Bundle 'chriskempson/vim-tomorrow-theme'


" ################### 基础 ######################

" Deps
if executable('ag')
    Bundle 'mileszs/ack.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
endif

" 多语言语法检查
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1

" 最轻量
" let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes

" 中等
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_pep8_args='--ignore=E501,E225'

" 重量级, 但是足够强大, 定制完成后相当个性化
" pylint codes: http://pylint-messages.wikidot.com/all-codes
" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'


let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>e :call ToggleErrors()<cr>
" nnoremap <Leader>tn :lnext<cr>
" nnoremap <Leader>tp :lprevious<cr>


" ################### 自动补全 ###################

" 代码自动补全
"迄今为止用到的最好的自动VIM自动补全插件
" 花了一天时间配置Windows下的ycm，弊端:vim启动变慢了
"重启 :YcmRestartServer
Bundle 'Valloric/YouCompleteMe'
"youcompleteme  默认tab  s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
let g:acp_enableAtStartup = 0

" enable completion from tags
let g:ycm_collect_identifiers_from_tags_files = 1

" Enable omni completion.系统自带补全
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Haskell post write lint and check with ghcmod
" $ `cabal install ghcmod` if missing and ensure
" ~/.cabal/bin is in your $PATH.
" if !executable("ghcmod")
" autocmd BufWritePost *.hs GhcModCheckAndLintAsync
" endif

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全

let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全

" 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
" nnoremap <leader>df :YcmCompleter GoToDefinition<CR>
nnoremap <leader>df :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>dc :YcmCompleter GoToDeclaration<CR>

" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
endif
" new version
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
endif

" insert模式下,直接触发自动补全,故不需要快捷键
" let g:ycm_key_invoke_completion = '<C-Space>'

" 在下列形式中不启用ycm
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \}



" 代码片段快速插入 (snippets中,是代码片段资源,可自己再补充)
Bundle 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" 下面这个给出各种语言的一些代码段，如果需要则添加到~/.vim/UltiSnips
Bundle 'honza/vim-snippets'
" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" 定义代码片段会使用vim运行环境下的UltiSnips文件夹
" 可设置多个，但必须在runtimepath下
" 改了个名字是为了不与vim-snippets下的UltiSnips冲突
" 这样就可以复制那边的过来再DIY,又可以方便查看有哪些snips
let g:UltiSnipsSnippetDirectories  = ['mUltiSnips']
" 定义存放代码片段的文件夹。
let g:UltiSnipsSnippetsDir = '~/.vim/mUltiSnips'
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>

" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'
" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭html文件补全"<"">"，由插件AutoCloseTag完成
au FileType html let b:delimitMate_matchpairs = "(:),[:],{:}"
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0



" ################### 快速编码 ###################

" 快速注释
Bundle 'scrooloose/nerdcommenter'
" 注释后加一个空格
let g:NERDSpaceDelims=1
let g:NERDRemoveExtraSpaces=1
" 有了注释就不再注释
" let g:NERDDefaultNesting=0
" 快捷键(map):
" ,cc           加上注释
" ,cu           解开注释
" ,cm           使用/* */,只有在支持多种注释类型的文件中才可使用
" ,cs           使用段落的/** \t *文本 \t  */
" ,c<space>     加上/解开注释
" ,a   选择注释类型

" 快速加入修改环绕字符
Bundle 'tpope/vim-surround'
" 快捷键(map):
" ,ysiw"  在单词上环绕 "
" ,ysiW:  在以空格为界的词上环绕 "
" ,yss"   在一行上环绕 "
" ,cs"'   改变环绕 "为 '
" ,ds"    删除环绕"

" for repeat -> enhance surround.vim, . to repeat command
Bundle 'tpope/vim-repeat'

" 快速去行尾空格 [, + <Space>]
Bundle 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>

" 快速赋值语句对齐
Bundle 'junegunn/vim-easy-align'
"<leader>a后还可以用<enter>来转换右对齐还是两端对齐，默认为左对齐
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }

" ################### 快速移动 ###################

"默认快捷键都带两个<Leader>
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
" 这个真的是神器啊，只要盯着自己想跳转的地方，
"nmap <leader><leader>w <Plug>(easymotion-w)
" 然后s-【你所盯着的字母】-选择字母[下面这个重要]
nmap s <Plug>(easymotion-s)
" 重复上一次操作, 类似repeat插件, 很强大
map <leader>. <Plug>(easymotion-repeat)
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
"当然本行的移动用自带的f+字母即可
"map <leader><leader>j <Plug>(easymotion-j)
"map <leader><leader>k <Plug>(easymotion-k)


"符号跳转,使用%
Bundle 'vim-scripts/matchit.zip'

" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
Bundle "kshenoy/vim-signature"

" ################### 文本对象 ###################

" 支持自定义文本对象
Bundle 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Bundle 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Bundle 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Bundle 'kana/vim-textobj-indent'

" for writting
Bundle 'reedes/vim-litecorrect'
Bundle 'reedes/vim-textobj-sentence'
Bundle 'reedes/vim-textobj-quote'
Bundle 'reedes/vim-wordy'

" TextObj Sentence
augroup textobj_sentence
    autocmd!
    autocmd FileType markdown call textobj#sentence#init()
    autocmd FileType textile call textobj#sentence#init()
    autocmd FileType text call textobj#sentence#init()
augroup END

" TextObj Quote
augroup textobj_quote
    autocmd!
    autocmd FileType markdown call textobj#quote#init()
    autocmd FileType textile call textobj#quote#init()
    autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

" ################### 快速选中 ###################
" 选中区块
Bundle 'terryma/vim-expand-region'
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
" 增加选中范围
vmap v <Plug>(expand_region_expand)
" 减少选中范围
vmap V <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
            \ 'iw'  :0,
            \ 'iW'  :0,
            \ 'i"'  :1,
            \ 'i''' :1,
            \ 'i]'  :1,
            \ 'ib'  :1,
            \ 'iB'  :1,
            \ 'il'  :1,
            \ 'ip'  :1,
            \ 'ie'  :1,
            \ }

" 多光标选中编辑
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-n>'
let g:multi_cursor_quit_key='<Esc>'

" ################### 功能相关 ###################

" file, buffer, Mru, Tag, 搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" 好吧可以通过 :help ctrlp-mapping 或? 查看按键
" c-p 进入find file模式
"
" Ctrl-d:Toggle between full-path and filename only search.
" Ctrl-r:Toggle between the string mode and full regexp mode.
" Ctrl-t:Open the selected file in a new tab.
"
" Ctrl-v:Open the selected file in a vertical split.
" Ctrl-s/x:Open the selected file in a horizontal split.
"
" Ctrl-f ToggleType(1),换另一种类型(file,buffer,MRU...)
" Ctrl-b ToggleType(-1)
" F5 更新MRU
" F7 清除MRU
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
map <leader>fh :CtrlPMRU<CR>
map <leader>fb :CtrlPBuffer<CR>
" 修改该选项为1，设置默认为按文件名搜索（否则为全路径）,可以使用 <c-d> 来切换
let g:ctrlp_by_filename = 1

let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$'
            \ }
" Use ag for the first choice.
" On Windows & without ag use "dir" as fallback command.
if executable('ag')
    let s:ctrlp_fallback = 'ag -i --nocolor --nogroup --hidden -g "" %s'
elseif executable('ack-grep')
    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
elseif executable('ack')
    let s:ctrlp_fallback = 'ack %s --nocolor -f'
elseif (has("win32") || has("win64") || has("win95") || has("win16"))
    let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
else
    let s:ctrlp_fallback = 'find %s -type f'
endif

if exists("g:ctrlp_user_command")
    unlet g:ctrlp_user_command
endif

let g:ctrlp_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': s:ctrlp_fallback
            \ }
" 启用/禁用每个会话的缓存:
let g:ctrlp_use_caching = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" 设置显示位置
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:15,results:500'
let g:ctrlp_mruf_max=500
" 跟随但是忽略内部循环的链接，避免重复
let g:ctrlp_follow_symlinks=1

" ctrlp插件funky - 不用ctag进行函数快速跳转
Bundle 'tacahiroy/ctrlp-funky'
let g:ctrlp_extensions = ['funky']
nnoremap <leader>ff :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <leader>f :execute 'CtrlPFunky \<' . expand('<cword>') . '\>'<Cr>
let g:ctrlp_funky_syntax_highlight = 1


" 类似sublimetext的搜索
" 光标移动到单词, 按\ 进入全局搜索,<C-\>重新打开/关闭ctrlsf窗口
" 实话说，运行速度比较慢，慎用,感觉意义不大，还是用IDE实现重构快些
Bundle "dyng/ctrlsf.vim"
" In CtrlSF:
" 回车/o, 打开
" t - 在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.

" 需要ag或ack依赖，grep的升级版!设置ctrlsf 使用ag
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    let g:ctrlsf_ackprg = 'ag'
elseif executable('ack-grep')
    let g:ctrlsf_ackprg = 'ack-grep'
elseif executable('ack')
    let g:ctrlsf_ackprg = 'ack'
endif

nmap \ <Plug>CtrlSFCwordPath
vmap \ <Plug>CtrlSFVwordPath
" 进入ctrlsf的命令行模式
" nmap <C-\> <Plug>CtrlSFPrompt
" reopen CtrlSF window
nmap <C-\> :CtrlSFToggle<CR>


" 设置为project就有可能不搜索文件,default为cwd
" let g:ctrlsf_default_root = 'project'
" 默认使用正则表达式
let g:ctrlsf_regex_pattern = 1
" highlight lines in preview and open window.
let g:ctrlsf_selected_line_hl = 'op'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_winsize = '40%'
" B 为before lines，A为after lines
let g:ctrlsf_context = '-B 5 -A 3'
let g:ctrlsf_auto_close = 0
" 修改后是否需要确认
let g:ctrlsf_confirm_save = 0

" Note: cannot use <CR> or <C-m> for open
" Use : o or t
let g:ctrlsf_mapping = {
            \ "open"  : "o",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-N>",
            \ "prev"  : "<C-P>",
            \ "pquit" : "q",
            \ }


" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作
" :Gdiff  :Gstatus :Gvsplit
Bundle 'tpope/vim-fugitive'
" 可记忆为 git diff edit
nnoremap <leader>gd :Gdiff<CR>
" not ready to open
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gp :Git push<CR>

" 比Gdiff好，会实时展示文件中修改的行
" 行号多一列
Bundle 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 1
let g:gitgutter_enabled = 1
let g:gitgutter_highlight_lines = 1
nnoremap <leader>gg :GitGutterToggle<CR>


" 可以用:Gist (-m -p -s something)直接提交/更新代码，只是对多文件查看和更新的支持不好
" 用:Gist -l(a) 查看你的所有gists
Bundle 'mattn/gist-vim'
" open browser after the post
let g:gist_open_browser_after_post = 1
" if you want to change the browser
let g:gist_browser_command = 'chrome %URL%'
let g:gist_post_private = 1
" Only :w! updates a gist.
let g:gist_update_on_write = 2
if (has("win32") || has("win64") || has("win95") || has("win16"))
    let g:gist_clip_command = 'putclip'
else
    let g:gist_clip_command = 'xclip -selection clipboard'
endif


" edit history, 可以查看回到某个历史状态
Bundle 'sjl/gundo.vim'
" 估计很少用到，故用了两个<leader>，然后history
noremap <leader><leader>h :GundoToggle<CR>


Bundle 'vim-scripts/sessionman.vim'
set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
if isdirectory(expand("~/.vim/bundle/sessionman.vim/"))
    " saves the current editing session.
    nmap <leader>ss :SessionSave<CR>
    " list the saved sessions.
    nmap <leader>sl :SessionList<CR>
    " wipes out all buffers, kills cscope and clears variables with session name.
    nmap <leader>sc :SessionClose<CR>
endif

" ################### 显示增强 ###################

" 字体补丁，用于帮助airline显示特殊字符
Bundle 'powerline/fonts'


" 状态栏增强展示
" 新的airline配置
Bundle 'bling/vim-airline'
" 有了powerline/fonts的支持就不要用自定义字符
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" tabline中当前buffer两端的分隔字符
" let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
" let g:airline#extensions#tabline#left_alt_sep = '|'
" 是否打开tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1

" let g:airline_left_sep = '>'
" let g:airline_right_sep = '<'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.whitespace = 'Ξ'

"在右下显示当前buffer的编号
"let g:airline_setion_y = 'BN: %{bufnr{"%"}}'


" 括号显示增强,这都要有。。。
Bundle 'kien/rainbow_parentheses.vim'
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


" ################### 快速导航 ###################

"目录导航
Bundle 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
" 用于切换NERDTree到当前文件目录
map <leader>nf :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
" the NERD tree window will close after opening a file
" let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
" 默认显示隐藏文件，切换快捷键为 I : Toggle hidden files
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" 设置是否自启动
" let g:nerdtree_tabs_open_on_gui_startup=0
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
" Automatically find and select currently opened file in NERDTree.
" It will take a lot of time when there are many files in the directory.
" let g:nerdtree_tabs_autofind = 1


Bundle 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 自动开启nerdtree
"let g:nerdtree_tabs_open_on_console_startup=1


" Vim Workspace Controller
Bundle "szw/vim-ctrlspace"
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8


" 标签导航,配合ctrlp-funky使用
" 需要ctags依赖(必须),http://ctags.sourceforge.net/
" 多语言支持配置见 https://github.com/majutsushi/tagbar/wiki
" 配置文件为.ctags
" 已含多语言支持
if executable('ctags')
    Bundle 'majutsushi/tagbar'
    set tags=./tags;/,~/.vimtags
    " Make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if gitroot != ''
        let &tags = &tags . ',' . gitroot . '/.git/tags'
    endif
    " c文件时自动打开tagbar
    " autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
    nmap <silent> <leader>t :TagbarToggle<CR>
    let g:tagbar_autofocus = 1

    let g:tagbar_type_css = {
          \ 'ctagstype' : 'css',
          \ 'kinds'     : [
          \ 'c:classes',
          \ 's:selectors',
          \ 'i:identities',
          \ ],
          \ 'deffile' :  '~/.vim/ctags/.ctags',
          \ }
    let g:tagbar_type_javascript = {
          \ 'deffile' :  '~/.vim/ctags/.ctags',
          \ }
    let g:tagbar_type_markdown = {
          \ 'ctagstype' : 'markdown',
          \ 'kinds' : [
          \ 'h:Heading_L1',
          \ 'i:Heading_L2',
          \ 'k:Heading_L3',
          \ ],
          \ 'deffile' :  '~/.vim/ctags/.ctags',
          \ }
    let g:tagbar_type_snippets = {
          \ 'ctagstype' : 'snippets',
          \ 'kinds' : [
          \ 's:snippets',
          \ ],
          \ 'deffile' :  '~/.vim/ctags/.ctags',
          \ }
endif

" 去除taglist =>原因: 使用tagbar和ctrlp-funky可以直接快速跳转函数和变量位置,taglist有些多余

" 任务列表插件，管理项目中的 TODO、FIXME、XXX 等标签
Bundle 'vim-scripts/TaskList.vim'
let g:tlTokenList = ["TODO", "FIXME", "CHANGED", "XXX", "NOTE", "WARN", "HACK"]
" 绑定快捷键，默认是 <Leader>t
nmap <leader>td <Plug>TaskList


" ################### 语言相关 ###################

"快速编译运行的插件
Bundle 'thinca/vim-quickrun'
let g:quickrun_config = {
      \   "_" : {
      \       "outputter" : "message",
      \   },
      \}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>qr <Plug>(quickrun)

" ###### Latex #########
"Bundle 'LaTeX-Suite-aka-Vim-LaTeX'
"上面那个太久了，应该只是一个mirror
"故改用下面这个，也是官网上的github网址
"官网地址http://vim-latex.sourceforge.net/
Bundle 'vim-latex/vim-latex'
"用到的快捷键:
" <leader>ll：compile
" <leader>lv：view pdf
" <leader>ls: 正向搜索
" SumatraPDF中 双击: 反向搜索
" Ctrl-J： 跳到下一个++位置（place holder）
" F5：insert/wrap in environment
" F9：do a completion (ref, cite, lename)
" za：fold/unfold
" <leader>rf：refresh folding
" 下面是官方的一些推荐配置
" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash
" Set your grep program to always generate a file-name.
set grepprg=grep\ -nH\ $*
" vim默认把空的tex文件设为plaintex而不是tex，导致latex-suite不被加载
let g:tex_flavor='latex'

" TIP: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!
set iskeyword+=:
autocmd BufEnter *.tex set sw=2

" 反向搜索相关
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf = 'xelatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
let g:Tex_ViewRule_pdf = 'sumatrapdf -reuse-instance -inverse-search "gvim -c \":RemoteOpen +\%l \%f\""'
" tex文件自动检查拼写
autocmd BufNewFile,BufRead *.tex set spell
" 关闭编辑tex文件时换行时自动对齐的功能
let g:tex_indent_items=0


" ###### Python #########

" python fly check, 弥补syntastic只能打开和保存才检查语法的不足
Bundle 'kevinw/pyflakes-vim'
let g:pyflakes_use_quickfix = 0

" for python.vim syntax highlight
Bundle 'hdima/python-syntax'
let python_highlight_all = 1



" ###### Golang #########
" 1.install golang and install gocode 'go get github.com/nsf/gocode'
" 2.make sure gocode in your path: `which gocode` (add $GOPATH/bin to you $PATH)
Bundle 'Blackrush/vim-gocode'
" Bundle 'fatih/vim-go.git'

" ###### Ruby #########
" Bundle 'vim-ruby/vim-ruby'
" Bundle 'nelstrom/vim-textobj-rubyblock'

" 有bug, 和当前有冲突, 尚未解决, 不要打开
" Bundle 'tpope/vim-endwise'


" ###### Markdown #########
" Markdown语法高亮
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

" 实时显示用chrome的扩展markdwon preview plus实现的，保存后自动加载
" 否则用vim的插件需要太多依赖了

" ###### HTML/CSS/JS/PHP #########
"        """""""""""""""""""
"        "     HTML/CSS     "
"        """""""""""""""""""

" Web的API，提供一些常用的方法
Bundle "mattn/webapi-vim"

" emmet HTML complete
Bundle "mattn/emmet-vim"
let g:user_emmet_settings = {
      \ 'php' : {
      \ 'extends' : 'html',
      \ 'filters' : 'c',
      \ },
      \ 'xml' : {
      \ 'extends' : 'html',
      \ },
      \ 'haml' : {
      \ 'extends' : 'html',
      \ },
      \}
let g:user_emmet_expandabbr_key = '<C-e>'
let g:user_emmet_leader_key='<C-e>'

" 自动补全html/xml标签
Bundle 'alvan/vim-closetag'

" 语法相关
Bundle 'hail2u/vim-css3-syntax'

" 配色相关
Bundle 'gorodinskiy/vim-coloresque'

" ###### Always highlight enclosing tags #########
Bundle "Valloric/MatchTagAlways"

" haml
" Bundle 'tpope/vim-haml'


"        """"""""""""""""""""""
"        "     javascript     "
"        """"""""""""""""""""""
" for javascript  注意: syntax这个插件要放前面
Bundle 'jelera/vim-javascript-syntax'

Bundle "pangloss/vim-javascript"
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

Bundle 'elzr/vim-json'
nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
let g:vim_json_syntax_conceal = 0

" ###### vim.less : less 自动更新##########
Bundle 'groenewege/vim-less'
autocmd BufWritePost *.less :!lessc % > %:p:r.css

Bundle 'briancollins/vim-jst'

Bundle 'kchmck/vim-coffee-script'

" for javascript 自动补全,配合YCM,需要安装nodejs&npm  see
" https://github.com/marijnh/tern_for_vim
Bundle 'marijnh/tern_for_vim'

" for jquery
" Bundle 'nono/jquery.vim'

"        """""""""""""""""""
"        "        PHP      "
"        """""""""""""""""""
Bundle 'spf13/PIV'
let g:DisableAutoPHPFolding = 0
let g:PIVAutoClose = 0

Bundle 'arnaud-lb/vim-php-namespace'
Bundle 'beyondwords/vim-twig'


" ###### Jinja2 #########
" Bundle 'Glench/Vim-Jinja2-Syntax'


" ###### nginx #########
" Bundle 'evanmiller/nginx-vim-syntax'


" ####### temp #######
" python code format
" autocmd FileType python nnoremap <leader>y :0,$!yapf --stdout-encoding=utf-8<Cr>
" autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
" Bundle 'mindriot101/vim-yapf'
" scriptencoding utf-8
" let g:yapf_style = "google"
" let g:yapf_style = "pep8"
" setenv PYTHONIOENCODING UTF-8
" nnoremap <leader>y :call Yapf()<cr>

" Bundle 'amoffat/snake'

"------------------------------------------- end of configs --------------------------------------------
